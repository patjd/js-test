// —————————————————————————————————————————————————————————————————————————————
// DO NOT EDIT THIS FILE!
// —————————————————————————————————————————————————————————————————————————————

/**
 * The `TableMock` object holds key-value pairs. It simulates network latency
 * by delaying `get` calls. The `set` method does not introduce latency but is
 * asynchronous.
 */
export class TableMock<K, V> {
  /**
   * Creates a new `TableMock` object.
   *
   * @param latency The network latency in milliseconds.
   */
  constructor(latency: number);

  /**
   * Returns the value associated to the `key`, or `undefined` if there is none.
   * This operation is delayed by `latency` milliseconds.
   *
   * @param key The key of the element to return.
   * @returns The element associated with the specified key, or `undefined` if it can't be found.
   */
  get(key: K): Promise<V | undefined>;

  /**
   * Sets the `value` for the `key`.
   *
   * @param key The key of the element to add.
   * @param value The value of the element to add.
   */
  set(key: K, value: V): Promise<void>;
}
