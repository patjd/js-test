// —————————————————————————————————————————————————————————————————————————————
// DO NOT EDIT THIS FILE!
// —————————————————————————————————————————————————————————————————————————————

import { symbols, TableMock } from "#internal/table_mock";
import { timeout } from "#internal/testing";
import { test } from "uvu";
import * as assert from "uvu/assert";
import { loadUsers } from "./slow_resolver.mjs";

const TIMEOUT_WITHOUT_CACHE = 100;
const TIMEOUT_WITH_CACHE = 10;

const ALL_USERS = [
  { id: 131, name: "Remy Fitzpatrick" },
  { id: 264, name: "Duncan Clark" },
  { id: 289, name: "Joy Hensley" },
  { id: 300, name: "Aniqa Stafford" },
  { id: 374, name: "Alexandru Dupont" },
  { id: 389, name: "Ihsan England" },
  { id: 420, name: "Freddie Holder" },
  { id: 425, name: "Frank Obrien" },
  { id: 516, name: "Barney Medrano" },
  { id: 614, name: "Emilio Chapman" },
  { id: 652, name: "Nadeem Bone" },
  { id: 685, name: "Jarvis Robbins" },
  { id: 728, name: "Kaiser Pratt" },
  { id: 752, name: "Syeda Rudd" },
  { id: 801, name: "Tyrell Esquivel" },
  { id: 878, name: "Yasser Hastings" },
  { id: 894, name: "Stanley Madden" },
  { id: 901, name: "Nina Talbot" },
  { id: 925, name: "Lucinda Legge" },
  { id: 943, name: "Lera Myles" },
];

const ALL_IDS = ALL_USERS.map((user) => user.id);

// Creates the GraphQL context
const context = Object.freeze({
  db: new TableMock(20),
  redis: new TableMock(0),
});

// Populates the database mock
for (let user of ALL_USERS) {
  context.db[symbols.kInternalSet](user.id, user);
}

// Clears the Redis store before every run
test.before.each(() => {
  context.redis[symbols.kInternalClear]();
});

test("loads correct users", async () => {
  await loadUsers(context, [131, 264]).then((users) => {
    assert.is(users[0].id, 131);
    assert.is(users[1].id, 264);
  });
});

test("handles unknown users", async () => {
  await loadUsers(context, [111, 222]).then((users) => {
    for (let user of users) {
      assert.is(user, null);
    }
  });
});

test("loads fast", async () => {
  await timeout(TIMEOUT_WITHOUT_CACHE, () => loadUsers(context, ALL_IDS));
  // Must be faster since all users should be cached
  await timeout(TIMEOUT_WITH_CACHE, () => loadUsers(context, ALL_IDS));
  // Must cache unknown users
  await loadUsers(context, [111]);
  await timeout(TIMEOUT_WITH_CACHE, () => loadUsers(context, [111]));
});

test.run();
